<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!--TODO 通过继承GenericServlet完成Servlet创建 -->
    <servlet>
        <servlet-name>servletDemo01</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo01</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo01</servlet-name>
        <url-pattern>/servletDemo01</url-pattern>
    </servlet-mapping>

    <!--TODO 通过继承HttpServlet完成Servlet创建 -->
    <servlet>
        <servlet-name>servletDemo02</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo02</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo02</servlet-name>
        <url-pattern>/servletDemo02</url-pattern>
    </servlet-mapping>

    <!--TODO 通过实现Servlet完成Servlet创建 -->
    <servlet>
        <servlet-name>servletDemo03</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo03</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo03</servlet-name>
        <url-pattern>/servletDemo03</url-pattern>
    </servlet-mapping>

    <!--TODO Servlet的生命周期-->
    <servlet>
        <servlet-name>servletDemo04</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo04</servlet-class>
        <!--
            - 第一种：应用加载时创建Servlet，它的优势是在服务器启动时，就把需要的对象都创建完成了，从而在使用的时候减
            少了创建对象的时间，提高了首次执行的效率。它的弊端也同样明显，因为在应用加载时就创建了Servlet对象，因此，
            导致内存中充斥着大量用不上的Servlet对象，造成了内存的浪费。
            - 第二种：请求第一次访问是创建Servlet，它的优势就是减少了对服务器内存的浪费，因为那些一直没有被访问过的Servlet对象
            都没有创建，因此也提高了服务器的启动时间。而它的弊端就是，如果有一些要在应用加载时就做的初始化操作，它都没法完成，
            从而要考虑其他技术实现。

            当需要在应用加载就要完成一些工作时，就需要选择第一种方式。当有很多Servlet的使用时机并不确定是，就选择第二种方式。

            配置Servlet的创建顺序，load-on-startup 元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)
            1.它的值必须是一个整数，表示servlet被加载的先后顺序
            2.如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。
            3.如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，
              就越先被加载。值相同时，容器就会自己选择顺序来加载。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo04</servlet-name>
        <url-pattern>/servletDemo04</url-pattern>
    </servlet-mapping>

    <!-- TODO Servlet线程安全的配置-->
    <servlet>
        <servlet-name>servletDemo05</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo05</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo05</servlet-name>
        <url-pattern>/servletDemo05</url-pattern>
    </servlet-mapping>

    <!-- TODO Servlet不同映射方式-->
    <!--三种映射方式的优先级为：第一种>第二种>第三种(越是具体的优先级越高)-->

    <!--第一种:指定名称的方式,访问的资源路径必须和映射配置完全相同 -->
    <!--<servlet>
        <servlet-name>servletDemo06</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo06</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo06</servlet-name>
        <url-pattern>/servletDemo06</url-pattern>
    </servlet-mapping>-->

    <!-- 第二种:以/开头+通配符的方式,只要符合目录结构即可，不用考虑结尾是什么-->
    <!--<servlet>
        <servlet-name>servletDemo06</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo06</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo06</servlet-name>
        <url-pattern>/servlet/*</url-pattern>
    </servlet-mapping>-->

    <!--第三种:通配符+固定格式结尾的方式,只要符合固定结尾格式即可，不用考虑前面的路径-->
    <servlet>
        <servlet-name>servletDemo06</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo06</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo06</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!--TODO Servlet多路径映射-->
    <servlet>
        <servlet-name>servletDemo07</servlet-name>
        <servlet-class>com.cw.servlet.ServletDemo07</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>servletDemo07</servlet-name>
        <url-pattern>/servletDemo07/*</url-pattern>
    </servlet-mapping>
</web-app>